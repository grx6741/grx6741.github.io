// Generated from Expr.g by ANTLR 4.13.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class ExprLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		IF=1, ELSE=2, WHILE=3, VAR_TYPE=4, IDEN=5, BOOl=6, INT=7, FLOAT=8, OPAREN=9, 
		CPAREN=10, OFLOWER=11, CFLOWER=12, NOT=13, AND=14, OR=15, XOR=16, GT=17, 
		GTE=18, LT=19, LTE=20, EQ=21, NEQ=22, ASSIGN=23, SEMICOLON=24, PLUS=25, 
		MINUS=26, MULT=27, DIV=28, SPACE=29;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"IF", "ELSE", "WHILE", "VAR_TYPE", "IDEN", "BOOl", "INT", "FLOAT", "OPAREN", 
			"CPAREN", "OFLOWER", "CFLOWER", "NOT", "AND", "OR", "XOR", "GT", "GTE", 
			"LT", "LTE", "EQ", "NEQ", "ASSIGN", "SEMICOLON", "PLUS", "MINUS", "MULT", 
			"DIV", "SPACE"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'if'", "'else'", "'while'", null, null, null, null, null, "'('", 
			"')'", "'{'", "'}'", "'~'", "'&'", "'|'", "'^'", "'>'", "'>='", "'<'", 
			"'<='", "'=='", "'!='", "'='", "';'", "'+'", "'-'", "'*'", "'/'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "IF", "ELSE", "WHILE", "VAR_TYPE", "IDEN", "BOOl", "INT", "FLOAT", 
			"OPAREN", "CPAREN", "OFLOWER", "CFLOWER", "NOT", "AND", "OR", "XOR", 
			"GT", "GTE", "LT", "LTE", "EQ", "NEQ", "ASSIGN", "SEMICOLON", "PLUS", 
			"MINUS", "MULT", "DIV", "SPACE"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public ExprLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Expr.g"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u001d\u00b2\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017"+
		"\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a"+
		"\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0003\u0003V\b\u0003\u0001\u0004\u0001\u0004\u0005\u0004Z\b\u0004\n\u0004"+
		"\f\u0004]\t\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005h\b"+
		"\u0005\u0001\u0006\u0004\u0006k\b\u0006\u000b\u0006\f\u0006l\u0001\u0007"+
		"\u0004\u0007p\b\u0007\u000b\u0007\f\u0007q\u0001\u0007\u0001\u0007\u0005"+
		"\u0007v\b\u0007\n\u0007\f\u0007y\t\u0007\u0001\u0007\u0001\u0007\u0004"+
		"\u0007}\b\u0007\u000b\u0007\f\u0007~\u0003\u0007\u0081\b\u0007\u0001\b"+
		"\u0001\b\u0001\t\u0001\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001"+
		"\f\u0001\f\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f"+
		"\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012"+
		"\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016"+
		"\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019"+
		"\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0000\u0000\u001d\u0001\u0001\u0003\u0002\u0005"+
		"\u0003\u0007\u0004\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n"+
		"\u0015\u000b\u0017\f\u0019\r\u001b\u000e\u001d\u000f\u001f\u0010!\u0011"+
		"#\u0012%\u0013\'\u0014)\u0015+\u0016-\u0017/\u00181\u00193\u001a5\u001b"+
		"7\u001c9\u001d\u0001\u0000\u0004\u0003\u0000AZ__az\u0004\u000009AZ__a"+
		"z\u0001\u000009\u0003\u0000\t\n\r\r  \u00ba\u0000\u0001\u0001\u0000\u0000"+
		"\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000"+
		"\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000"+
		"\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000"+
		"\u000f\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000"+
		"\u0013\u0001\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000"+
		"\u0017\u0001\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000"+
		"\u001b\u0001\u0000\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000"+
		"\u001f\u0001\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000#\u0001"+
		"\u0000\u0000\u0000\u0000%\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000"+
		"\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000"+
		"\u0000-\u0001\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u00001"+
		"\u0001\u0000\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u00005\u0001\u0000"+
		"\u0000\u0000\u00007\u0001\u0000\u0000\u0000\u00009\u0001\u0000\u0000\u0000"+
		"\u0001;\u0001\u0000\u0000\u0000\u0003>\u0001\u0000\u0000\u0000\u0005C"+
		"\u0001\u0000\u0000\u0000\u0007U\u0001\u0000\u0000\u0000\tW\u0001\u0000"+
		"\u0000\u0000\u000bg\u0001\u0000\u0000\u0000\rj\u0001\u0000\u0000\u0000"+
		"\u000f\u0080\u0001\u0000\u0000\u0000\u0011\u0082\u0001\u0000\u0000\u0000"+
		"\u0013\u0084\u0001\u0000\u0000\u0000\u0015\u0086\u0001\u0000\u0000\u0000"+
		"\u0017\u0088\u0001\u0000\u0000\u0000\u0019\u008a\u0001\u0000\u0000\u0000"+
		"\u001b\u008c\u0001\u0000\u0000\u0000\u001d\u008e\u0001\u0000\u0000\u0000"+
		"\u001f\u0090\u0001\u0000\u0000\u0000!\u0092\u0001\u0000\u0000\u0000#\u0094"+
		"\u0001\u0000\u0000\u0000%\u0097\u0001\u0000\u0000\u0000\'\u0099\u0001"+
		"\u0000\u0000\u0000)\u009c\u0001\u0000\u0000\u0000+\u009f\u0001\u0000\u0000"+
		"\u0000-\u00a2\u0001\u0000\u0000\u0000/\u00a4\u0001\u0000\u0000\u00001"+
		"\u00a6\u0001\u0000\u0000\u00003\u00a8\u0001\u0000\u0000\u00005\u00aa\u0001"+
		"\u0000\u0000\u00007\u00ac\u0001\u0000\u0000\u00009\u00ae\u0001\u0000\u0000"+
		"\u0000;<\u0005i\u0000\u0000<=\u0005f\u0000\u0000=\u0002\u0001\u0000\u0000"+
		"\u0000>?\u0005e\u0000\u0000?@\u0005l\u0000\u0000@A\u0005s\u0000\u0000"+
		"AB\u0005e\u0000\u0000B\u0004\u0001\u0000\u0000\u0000CD\u0005w\u0000\u0000"+
		"DE\u0005h\u0000\u0000EF\u0005i\u0000\u0000FG\u0005l\u0000\u0000GH\u0005"+
		"e\u0000\u0000H\u0006\u0001\u0000\u0000\u0000IJ\u0005i\u0000\u0000JK\u0005"+
		"n\u0000\u0000KV\u0005t\u0000\u0000LM\u0005f\u0000\u0000MN\u0005l\u0000"+
		"\u0000NO\u0005o\u0000\u0000OP\u0005a\u0000\u0000PV\u0005t\u0000\u0000"+
		"QR\u0005b\u0000\u0000RS\u0005o\u0000\u0000ST\u0005o\u0000\u0000TV\u0005"+
		"l\u0000\u0000UI\u0001\u0000\u0000\u0000UL\u0001\u0000\u0000\u0000UQ\u0001"+
		"\u0000\u0000\u0000V\b\u0001\u0000\u0000\u0000W[\u0007\u0000\u0000\u0000"+
		"XZ\u0007\u0001\u0000\u0000YX\u0001\u0000\u0000\u0000Z]\u0001\u0000\u0000"+
		"\u0000[Y\u0001\u0000\u0000\u0000[\\\u0001\u0000\u0000\u0000\\\n\u0001"+
		"\u0000\u0000\u0000][\u0001\u0000\u0000\u0000^_\u0005t\u0000\u0000_`\u0005"+
		"r\u0000\u0000`a\u0005u\u0000\u0000ah\u0005e\u0000\u0000bc\u0005f\u0000"+
		"\u0000cd\u0005a\u0000\u0000de\u0005l\u0000\u0000ef\u0005s\u0000\u0000"+
		"fh\u0005e\u0000\u0000g^\u0001\u0000\u0000\u0000gb\u0001\u0000\u0000\u0000"+
		"h\f\u0001\u0000\u0000\u0000ik\u0007\u0002\u0000\u0000ji\u0001\u0000\u0000"+
		"\u0000kl\u0001\u0000\u0000\u0000lj\u0001\u0000\u0000\u0000lm\u0001\u0000"+
		"\u0000\u0000m\u000e\u0001\u0000\u0000\u0000np\u0007\u0002\u0000\u0000"+
		"on\u0001\u0000\u0000\u0000pq\u0001\u0000\u0000\u0000qo\u0001\u0000\u0000"+
		"\u0000qr\u0001\u0000\u0000\u0000rs\u0001\u0000\u0000\u0000sw\u0005.\u0000"+
		"\u0000tv\u0007\u0002\u0000\u0000ut\u0001\u0000\u0000\u0000vy\u0001\u0000"+
		"\u0000\u0000wu\u0001\u0000\u0000\u0000wx\u0001\u0000\u0000\u0000x\u0081"+
		"\u0001\u0000\u0000\u0000yw\u0001\u0000\u0000\u0000z|\u0005.\u0000\u0000"+
		"{}\u0007\u0002\u0000\u0000|{\u0001\u0000\u0000\u0000}~\u0001\u0000\u0000"+
		"\u0000~|\u0001\u0000\u0000\u0000~\u007f\u0001\u0000\u0000\u0000\u007f"+
		"\u0081\u0001\u0000\u0000\u0000\u0080o\u0001\u0000\u0000\u0000\u0080z\u0001"+
		"\u0000\u0000\u0000\u0081\u0010\u0001\u0000\u0000\u0000\u0082\u0083\u0005"+
		"(\u0000\u0000\u0083\u0012\u0001\u0000\u0000\u0000\u0084\u0085\u0005)\u0000"+
		"\u0000\u0085\u0014\u0001\u0000\u0000\u0000\u0086\u0087\u0005{\u0000\u0000"+
		"\u0087\u0016\u0001\u0000\u0000\u0000\u0088\u0089\u0005}\u0000\u0000\u0089"+
		"\u0018\u0001\u0000\u0000\u0000\u008a\u008b\u0005~\u0000\u0000\u008b\u001a"+
		"\u0001\u0000\u0000\u0000\u008c\u008d\u0005&\u0000\u0000\u008d\u001c\u0001"+
		"\u0000\u0000\u0000\u008e\u008f\u0005|\u0000\u0000\u008f\u001e\u0001\u0000"+
		"\u0000\u0000\u0090\u0091\u0005^\u0000\u0000\u0091 \u0001\u0000\u0000\u0000"+
		"\u0092\u0093\u0005>\u0000\u0000\u0093\"\u0001\u0000\u0000\u0000\u0094"+
		"\u0095\u0005>\u0000\u0000\u0095\u0096\u0005=\u0000\u0000\u0096$\u0001"+
		"\u0000\u0000\u0000\u0097\u0098\u0005<\u0000\u0000\u0098&\u0001\u0000\u0000"+
		"\u0000\u0099\u009a\u0005<\u0000\u0000\u009a\u009b\u0005=\u0000\u0000\u009b"+
		"(\u0001\u0000\u0000\u0000\u009c\u009d\u0005=\u0000\u0000\u009d\u009e\u0005"+
		"=\u0000\u0000\u009e*\u0001\u0000\u0000\u0000\u009f\u00a0\u0005!\u0000"+
		"\u0000\u00a0\u00a1\u0005=\u0000\u0000\u00a1,\u0001\u0000\u0000\u0000\u00a2"+
		"\u00a3\u0005=\u0000\u0000\u00a3.\u0001\u0000\u0000\u0000\u00a4\u00a5\u0005"+
		";\u0000\u0000\u00a50\u0001\u0000\u0000\u0000\u00a6\u00a7\u0005+\u0000"+
		"\u0000\u00a72\u0001\u0000\u0000\u0000\u00a8\u00a9\u0005-\u0000\u0000\u00a9"+
		"4\u0001\u0000\u0000\u0000\u00aa\u00ab\u0005*\u0000\u0000\u00ab6\u0001"+
		"\u0000\u0000\u0000\u00ac\u00ad\u0005/\u0000\u0000\u00ad8\u0001\u0000\u0000"+
		"\u0000\u00ae\u00af\u0007\u0003\u0000\u0000\u00af\u00b0\u0001\u0000\u0000"+
		"\u0000\u00b0\u00b1\u0006\u001c\u0000\u0000\u00b1:\u0001\u0000\u0000\u0000"+
		"\t\u0000U[glqw~\u0080\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}